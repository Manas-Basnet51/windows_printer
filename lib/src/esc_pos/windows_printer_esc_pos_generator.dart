import 'dart:convert';
import '../windows_printer_enums.dart';
import '../windows_printer_models.dart';

/// Main ESC/POS command generator
///
/// ‚ö†Ô∏è IMPORTANT: Do not use emojis (üéâ, ‚ù§Ô∏è, etc.) in text content.
/// Thermal printers use ASCII/Extended ASCII character sets, not Unicode,
class WPESCPOSGenerator {
  static const List<int> _esc = [0x1B];
  static const List<int> _gs = [0x1D];
  static const List<int> _lf = [0x0A];
  static const List<int> _crlf = [0x0D, 0x0A];
  
  final WPPaperSize paperSize;
  final List<int> _buffer = [];
  
  WPESCPOSGenerator({this.paperSize = WPPaperSize.mm80}) {
    _buffer.addAll(_esc);
    _buffer.add(0x40);
  }
  
  /// Get the generated bytes
  List<int> getBytes() => List<int>.from(_buffer);
  
  /// Clear the buffer
  void clear() {
    _buffer.clear();
    _buffer.addAll(_esc);
    _buffer.add(0x40);
  }
  
  /// Add text with optional styling
  void text(String text, {WPTextStyle? style}) {
    style ??= const WPTextStyle();
    
    _setAlignment(style.align);
    
    _setTextFormatting(style);
    
    _buffer.addAll(utf8.encode(text));
    _buffer.addAll(_crlf);
    
    _resetFormatting();
  }
  
  /// Add a line break
  void feed([int lines = 1]) {
    for (int i = 0; i < lines; i++) {
      _buffer.addAll(_lf);
    }
  }
  
  /// Add a horizontal line
  void separator({String char = '-'}) {
    final lineWidth = paperSize.width ~/ 12;
    final line = char * lineWidth;
    text(line);
  }
  
  /// Cut the paper
  void cut({bool partial = false}) {
    _buffer.addAll(_gs);
    _buffer.add(0x56);
    _buffer.add(partial ? 1 : 0);
  }
  
  /// Open cash drawer
  void openDrawer({int pin = 0}) {
    _buffer.addAll(_esc);
    _buffer.add(0x70);
    _buffer.add(pin);
    _buffer.add(0x40);
    _buffer.add(0xF0);
  }
  
  /// Make beep sound
  void beep({int count = 1, int duration = 100}) {
    for (int i = 0; i < count; i++) {
      _buffer.addAll(_esc);
      _buffer.add(0x42);
      _buffer.add(duration ~/ 50);
    }
  }
  
  /// Add barcode
  void barcode(WPBarcodeType type, String data, {
    int height = 162,
    int width = 3,
    bool showText = true,
  }) {
    _buffer.addAll(_gs);
    _buffer.add(0x68);
    _buffer.add(height);
    
    _buffer.addAll(_gs);
    _buffer.add(0x77);
    _buffer.add(width);
    
    _buffer.addAll(_gs);
    _buffer.add(0x48);
    _buffer.add(showText ? 2 : 0);
    
    _buffer.addAll(_gs);
    _buffer.add(0x6B);
    _buffer.add(type.value);
    _buffer.add(data.length);
    _buffer.addAll(utf8.encode(data));
  }
  
  /// Add QR code
  void qrCode(String data, {int size = 6, int errorCorrection = 1}) {
    _buffer.addAll(_gs);
    _buffer.addAll([0x28, 0x6B, 0x04, 0x00, 0x31, 0x41, 0x32, 0x00]);
    
    _buffer.addAll(_gs);
    _buffer.addAll([0x28, 0x6B, 0x03, 0x00, 0x31, 0x43]);
    _buffer.add(size);
    
    _buffer.addAll(_gs);
    _buffer.addAll([0x28, 0x6B, 0x03, 0x00, 0x31, 0x45]);
    _buffer.add(errorCorrection);
    
    final dataBytes = utf8.encode(data);
    final length = dataBytes.length + 3;
    _buffer.addAll(_gs);
    _buffer.addAll([0x28, 0x6B]);
    _buffer.add(length & 0xFF);
    _buffer.add((length >> 8) & 0xFF);
    _buffer.addAll([0x31, 0x50, 0x30]);
    _buffer.addAll(dataBytes);
    
    _buffer.addAll(_gs);
    _buffer.addAll([0x28, 0x6B, 0x03, 0x00, 0x31, 0x51, 0x30]);
  }
  
  /// Set text alignment
  void _setAlignment(WPTextAlign align) {
    _buffer.addAll(_esc);
    _buffer.add(0x61);
    _buffer.add(align.value);
  }
  
  /// Set text formatting
  void _setTextFormatting(WPTextStyle style) {
    _buffer.addAll(_esc);
    _buffer.add(0x45);
    _buffer.add(style.bold ? 1 : 0);
    
    _buffer.addAll(_esc);
    _buffer.add(0x2D);
    _buffer.add(style.underline ? 1 : 0);
    
    _buffer.addAll(_gs);
    _buffer.add(0x21);
    _buffer.add(style.size.value);
    
    _buffer.addAll(_gs);
    _buffer.add(0x42);
    _buffer.add(style.invert ? 1 : 0);
  }
  
  /// Reset formatting to defaults
  void _resetFormatting() {
    _buffer.addAll(_esc);
    _buffer.add(0x45);
    _buffer.add(0);
    
    _buffer.addAll(_esc);
    _buffer.add(0x2D);
    _buffer.add(0);
    
    _buffer.addAll(_gs);
    _buffer.add(0x21);
    _buffer.add(0);
    
    _buffer.addAll(_gs);
    _buffer.add(0x42);
    _buffer.add(0);
    
    _buffer.addAll(_esc);
    _buffer.add(0x61);
    _buffer.add(0);
  }
  
  /// Add raw bytes directly
  void raw(List<int> bytes) {
    _buffer.addAll(bytes);
  }
  
  /// Add image (simple monochrome bitmap)
  void image(List<List<bool>> bitmap) {
    final width = bitmap.isNotEmpty ? bitmap[0].length : 0;
    final height = bitmap.length;
    
    if (width == 0 || height == 0) return;
    
    final widthBytes = (width + 7) ~/ 8;
    
    _buffer.addAll(_esc);
    _buffer.add(0x2A);
    _buffer.add(0x00);
    _buffer.add(width & 0xFF);
    _buffer.add((width >> 8) & 0xFF);
    
    for (int y = 0; y < height; y++) {
      for (int x = 0; x < widthBytes; x++) {
        int byte = 0;
        for (int bit = 0; bit < 8; bit++) {
          final pixelX = x * 8 + bit;
          if (pixelX < width && bitmap[y][pixelX]) {
            byte |= (1 << (7 - bit));
          }
        }
        _buffer.add(byte);
      }
    }
    _buffer.addAll(_lf);
  }
}