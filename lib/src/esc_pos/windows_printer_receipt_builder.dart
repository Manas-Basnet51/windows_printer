import 'package:windows_printer/src/esc_pos/windows_printer_esc_pos_generator.dart';

import '../windows_printer_enums.dart';
import '../windows_printer_models.dart';

/// Helper class for easy receipt generation
///
/// ⚠️ EMOJI WARNING: Thermal printers use ASCII/Extended ASCII character sets, 
/// not Unicode. Avoid emojis (🎉, ❤️, 🌟) as they won't print correctly.
class WPReceiptBuilder {
  final WPESCPOSGenerator _generator;
  
  WPReceiptBuilder({WPPaperSize wpPaperSize = WPPaperSize.mm80}) 
      : _generator = WPESCPOSGenerator(paperSize : wpPaperSize);
  
  /// Add header text
  WPReceiptBuilder header(String text) {
    _generator.text(
      text, 
      style: const WPTextStyle(
        align: WPTextAlign.center, 
        bold: true, 
        size: WPTextSize.doubleHeightWidth
      )
    );
    return this;
  }
  
  /// Add subtitle
  WPReceiptBuilder subtitle(String text) {
    _generator.text(
      text,
      style: const WPTextStyle(align: WPTextAlign.center)
    );
    return this;
  }
  
  /// Add separator line
  WPReceiptBuilder separator() {
    _generator.separator();
    return this;
  }
  
  /// Add regular text line
  WPReceiptBuilder line(String text, {WPTextStyle? style}) {
    _generator.text(text, style: style);
    return this;
  }
  
  /// Add item with price (left-aligned item, right-aligned price)
  WPReceiptBuilder item(String name, String price) {
    final paperWidth = _generator.paperSize.width ~/ 12; // Approximate chars
    final totalLength = name.length + price.length;
    final spacesNeeded = paperWidth - totalLength;
    final spaces = spacesNeeded > 0 ? ' ' * spacesNeeded : ' ';
    
    _generator.text('$name$spaces$price');
    return this;
  }
  
  /// Add total line
  WPReceiptBuilder total(String amount) {
    _generator.text(
      'TOTAL: $amount',
      style: const WPTextStyle(
        bold: true, 
        size: WPTextSize.doubleHeight, 
        align: WPTextAlign.center
      )
    );
    return this;
  }
  
  /// Add footer text
  WPReceiptBuilder footer(String text) {
    _generator.text(
      text,
      style: const WPTextStyle(align: WPTextAlign.center, bold: true)
    );
    return this;
  }
  
  /// Add blank lines
  WPReceiptBuilder blank([int lines = 1]) {
    _generator.feed(lines);
    return this;
  }
  
  /// Add barcode
  WPReceiptBuilder addBarcode(WPBarcodeType type, String data) {
    _generator.barcode(type, data);
    return this;
  }
  
  /// Add QR code
  WPReceiptBuilder addQRCode(String data) {
    _generator.qrCode(data);
    return this;
  }
  
  /// Cut paper
  WPReceiptBuilder cut() {
    _generator.cut();
    return this;
  }
  
  /// Open drawer
  WPReceiptBuilder drawer() {
    _generator.openDrawer();
    return this;
  }
  
  /// Beep
  WPReceiptBuilder beep() {
    _generator.beep();
    return this;
  }
  
  /// Get the generated bytes
  List<int> build() => _generator.getBytes();
}